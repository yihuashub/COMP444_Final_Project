#include<ESP8266WiFi.h>

#include <ESP8266HTTPClient.h>

#include <ESP8266WebServer.h>

String ssid;
uint8_t encryptiontype; //UNSIGNED INT OF WIDTH 8 BITS
int32_t rssi;
int32_t channel;
uint8_t * bssid;
bool ishidden;
bool stop;
int selected = 0;
bool connectWIFI = false;
int command; //Int to store app command state.
int connectIndex = 0;

//state

bool connectWifiState = false;

ESP8266WebServer server(80);

void setup() {

  stop = false;
  Serial.begin(115200);
  //Serial.println();
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();

  server.on("/", HTTP_handleRoot);
  server.onNotFound(HTTP_handleRoot);
  server.begin();
  connectIndex = 0;
  delay(100);

}

void loop() {

  if (!stop) {
    int n = WiFi.scanNetworks(false, true);
    Serial.printf("Found %d Wi-Fis", n);
    delay(2000);

    for (int i = 0; i < n; i++) {
      if (Serial.available()) {
        while (Serial.available() > 0) {
          stop = true; // suposetd to be reasived something.. but.. here is not..
          char inByte = Serial.read();
          //Serial.write(inByte);
          if(connectIndex % 2 == 0){
            Serial.printf("Connecting -");
          }else{
            Serial.printf("Connecting /");
          }
          connectIndex++;
          //selected = (int)inByte;
          connectWifiState = true;
          delay(2000);
        }
      }

      if (!stop) {
        WiFi.getNetworkInfo(i, ssid, encryptiontype, rssi, bssid, channel, ishidden); //PARAMETERS ARE PASSED BY REFERENCE
        Serial.printf("%d:%s,ch:%d (%ddbm) %s %s\n", i + 1, ssid.c_str(), channel, rssi, encryptiontype == ENC_TYPE_NONE ? "OPEN" : " ", ishidden ? "hidden" : " ");
        delay(2000);
      }
    }
  }

  if (connectWifiState) {
    Serial.printf("%s", ssid.c_str());
    WiFi.begin(ssid.c_str(), NULL);
    
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.print("Connected");
    delay(1000);
    Serial.print(WiFi.localIP());
    connectWifiState = false;
    connectWIFI = true;
    delay(2000);
  }

  if (connectWIFI) {
    if (Serial.available() > 0) {
      command = Serial.read();
      switch (command) {
      case 'G':
        goAhead();
        break;
      case 'B':
        goBack();
        break;
      }

    }
  server.handleClient();
  delay(50);

  }
}


void HTTP_handleRoot(void) {
  String fire ="";
  String humidity ="";
  String temperature ="";
  String message = "";
  
  if (server.hasArg("message") && server.hasArg("fire") && server.hasArg("humidity") && server.hasArg("temperature")) {
    message = server.arg("message");
    fire = server.arg("fire");
    humidity = server.arg("humidity");
    temperature = server.arg("temperature");

    Serial.print(message);
    delay(300);
    Serial.print('$');
    delay(300);
    Serial.print("F:"+fire+" H:"+humidity+ " T:"+temperature);
    delay(300);
    Serial.print('\a');
  }
  server.send(200, "text/html", "");
}

void goAhead() {

  if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status

    HTTPClient http; //Declare an object of class HTTPClient

    http.begin("http://192.168.4.1/?State=G"); //Specify request destination
    int httpCode = http.GET(); //Send the request

    if (httpCode > 0) { //Check the returning code

      String payload = http.getString(); //Get the request response payload
      Serial.print("go SENT"); //Print the response payload
    }

    http.end(); //Close connection
  }
}

void goBack() {

  if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status

    HTTPClient http; //Declare an object of class HTTPClient

    http.begin("http://192.168.4.1/?State=B"); //Specify request destination
    int httpCode = http.GET(); //Send the request

    if (httpCode > 0) { //Check the returning code

      String payload = http.getString(); //Get the request response payload
      Serial.print("back SENT"); //Print the response payload
    }

    http.end(); //Close connection
  }
}
