/*
YIHUA HUANG PROJECT
*/
#include <Servo.h>
#include <dht.h>

dht DHT;

const int AIN1 = 13; //control pin 1 on the motor driver for the right motor
const int AIN2 = 12; //control pin 2 on the motor driver for the right motor
const int PWMA = 11; //speed control pin on the motor driver for the right motor

//the left motor will be controlled by the motor B pins on the motor driverf
const int PWMB = 10; //speed control pin on the motor driver for the left motor
const int BIN2 = 9; //control pin 2 on the motor driver for the left motor
const int BIN1 = 8; //control pin 1 on the motor driver for the left motor

const int redPin = 2; //pin to control the red LED inside the RGB LED
const int greenPin = 4; //pin to control the green LED inside the RGB LED
const int bluePin = 3; //pin to control the blue LED inside the RGB LED

//distance variables
const int trigPin = 6;
const int echoPin = 5;

int switchPin = 7; //switch to turn the robot on and off

int servoPin = A0;
int DHT11Pin = A1;
int fireSensorPin = A2;

int fireSensor; //read analoog value

Servo servo;

int servoAngle = 0; // servo position in degrees

float distance = 0; //variable to store the distance measured by the distance sensor

//robot behaviour variables
int backupTime = 300; //amount of time that the robot will back up when it senses an object
int turnTime = 200; //amount that the robot will turn once it has backed up

//human
int command;

bool hasFire = false;

/********************************************************************************/
void setup() {
  pinMode(trigPin, OUTPUT); //this pin will send ultrasonic pulses out from the distance sensor
  pinMode(echoPin, INPUT); //this pin will sense when the pulses reflect back to the distance sensor

  pinMode(switchPin, INPUT_PULLUP); //set this as a pullup to sense whether the switch is flipped

  //set the motor contro pins as outputs
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);

  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);

  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);

  Serial.begin(115200); //begin serial communication with the computer
  Serial.print("To infinity and beyond!"); //test the serial connection

  servo.attach(servoPin);


  //fireCheck();
  //scanAround();
}

/********************************************************************************/
void loop() {
    
  if (Serial.available() > 0) {
    command = Serial.read();
    switch (command) {
    case 'G':
      goAhead();
      break;
    case 'B':
      goBack();
      break;
    }

  }

  //DETECT THE DISTANCE READ BY THE DISTANCE SENSOR
  distance = getDistance();

  fireSensor = analogRead(fireSensorPin);
 // Serial.println(fireSensor); // read input value

  analogWrite(redPin, 0);
  analogWrite(greenPin, 0);
  analogWrite(bluePin, 255);

  if (digitalRead(switchPin) == LOW) { //if the on switch is flipped
    if (fireSensor < 200) {
      // if may found a fire
      analogWrite(redPin, 255);
      analogWrite(greenPin, 0);
      analogWrite(bluePin, 0);
      rightMotor(0);
      leftMotor(0);
      delay(200);

      hasFire = fireCheck();

    }

    if(hasFire){

      rightMotor(0);
      leftMotor(0);
      delay(200); 
      
      analogWrite(redPin, 255);
      analogWrite(greenPin, 0);
      analogWrite(bluePin, 0);

      delay(1000); 


      analogWrite(redPin, 0);
      analogWrite(greenPin, 0);
      analogWrite(bluePin, 255);

      if(fireSensor > 100){
        hasFire = false;
      }
    }
    
    if (!hasFire) {
      // no fire
      if (distance < 10) { //if an object is detected
        //back up and turn
        analogWrite(redPin, 255);
        analogWrite(greenPin, 169);
        analogWrite(bluePin, 0);

        //stop for a moment
        rightMotor(0);
        leftMotor(0);
        delay(200);

        //scan around
        trunAround(scanAround());

      } else { //if no obstacle is detected drive forward
        // Serial.print(" ");
        // Serial.print("Moving...");

        analogWrite(redPin, 0);
        analogWrite(greenPin, 255);
        analogWrite(bluePin, 0);

          if (fireSensor > 200) {
            rightMotor(255);
            leftMotor(255);
          }

      }
    }

  } else { //if the switch is off then stop

    //stop the motors
    rightMotor(0);
    leftMotor(0);
  }

  delay(50); //wait 50 milliseconds between readings
}

/********************************************************************************/
void rightMotor(int motorSpeed) //function for driving the right motor
{
  if (motorSpeed > 0) //if the motor should drive forward (positive speed)
  {
    digitalWrite(AIN1, HIGH); //set pin 1 to high
    digitalWrite(AIN2, LOW); //set pin 2 to low
  } else if (motorSpeed < 0) //if the motor should drive backwar (negative speed)
  {
    digitalWrite(AIN1, LOW); //set pin 1 to low
    digitalWrite(AIN2, HIGH); //set pin 2 to high
  } else //if the motor should stop
  {
    digitalWrite(AIN1, LOW); //set pin 1 to low
    digitalWrite(AIN2, LOW); //set pin 2 to low
  }
  analogWrite(PWMA, abs(motorSpeed)); //now that the motor direction is set, drive it at the entered speed
}

/********************************************************************************/
void leftMotor(int motorSpeed) //function for driving the left motor
{
  if (motorSpeed > 0) //if the motor should drive forward (positive speed)
  {
    digitalWrite(BIN1, HIGH); //set pin 1 to high
    digitalWrite(BIN2, LOW); //set pin 2 to low
  } else if (motorSpeed < 0) //if the motor should drive backwar (negative speed)
  {
    digitalWrite(BIN1, LOW); //set pin 1 to low
    digitalWrite(BIN2, HIGH); //set pin 2 to high
  } else //if the motor should stop
  {
    digitalWrite(BIN1, LOW); //set pin 1 to low
    digitalWrite(BIN2, LOW); //set pin 2 to low
  }
  analogWrite(PWMB, abs(motorSpeed)); //now that the motor direction is set, drive it at the entered speed
}

/********************************************************************************/
//RETURNS THE DISTANCE MEASURED BY THE HC-SR04 DISTANCE SENSOR
float getDistance() {
  float echoTime; //variable to store the time it takes for a ping to bounce off an object
  float calcualtedDistance; //variable to store the distance calculated from the echo time

  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  echoTime = pulseIn(echoPin, HIGH); //use the pulsein command to see how long it takes for the
  //pulse to bounce back to the sensor

  calcualtedDistance = echoTime / 148.0; //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound)

  return calcualtedDistance; //send back the distance that was calculated
}

/////

void goAhead() {
  analogWrite(redPin, 0);
  analogWrite(greenPin, 255);
  analogWrite(bluePin, 0);

  rightMotor(255);
  leftMotor(255);
  delay(backupTime);
  rightMotor(0); //turn the right motor off
  leftMotor(0); //turn the left motor off

}

void goBack() {

  analogWrite(redPin, 255);
  analogWrite(greenPin, 50);
  analogWrite(bluePin, 0);

  rightMotor(-255);
  leftMotor(-255);
  delay(backupTime);
  rightMotor(0); //turn the right motor off
  leftMotor(0); //turn the left motor off
}

void goLeft(int calTurnTimes) {

  leftMotor(-200);
  rightMotor(255);
  delay(calTurnTimes);
  rightMotor(0); //turn the right motor off
  leftMotor(0); //turn the left motor off
}

void goRight(int calTurnTimes) {

  rightMotor(-200); //drive the right wheel forward
  leftMotor(255);
  delay(calTurnTimes);
  rightMotor(0); //turn the right motor off
  leftMotor(0); //turn the left motor off

}

void trunAround(int angle) {
  int turnTimes = 0;
  //Serial.println(angle); // print the units

  //back up
  rightMotor(-255);
  leftMotor(-255);
  delay(backupTime);
  rightMotor(0); //turn the right motor off
  leftMotor(0);
  delay(200);

  if (angle > 90) {
    turnTimes = (90 - (180 - angle)) * 4;
    Serial.print("Left: ");
    Serial.print(turnTimes);
    Serial.println(" times"); // print the units
    goLeft(turnTimes);

  } else if (angle < 90) {
    turnTimes = (90 - angle) * 4;
    Serial.print("Right: ");
    Serial.print(turnTimes);
    Serial.println(" times"); // print the units

    goRight(turnTimes);

  }

  delay(2000);
  servo.write(90);
  delay(2000);

}

int scanAround() {
  float distance = 0;
  float longest = 0;
  int angle = 0;

  for (servoAngle = 0; servoAngle < 180; servoAngle++) //move the micro servo from 0 degrees to 170 degrees
  {
    distance = getDistance();

    if (longest == 0) {
      longest = distance;
      angle = servoAngle;
    } else {
      if (distance > longest) {
        longest = distance;
        angle = servoAngle;
      }
    }

    // Serial.print("Distance: ");
    //Serial.print(distance);
    //Serial.println(" in"); // print the units

    servo.write(servoAngle);
    delay(20);
  }
  Serial.print("longest: ");
  Serial.print(longest);
  Serial.print("angle: ");
  Serial.print(angle);

  Serial.println("./"); // print the units
  delay(20);

  servo.write(angle);
  delay(2000);

  return angle;
}

bool fireCheck() {
  int counter = 0;

  fireSensor = analogRead(fireSensorPin);
  //Serial.println(fireSensor); // read input value

  if (fireSensor < 100) {

    while (counter < 7 && fireSensor < 350) { // made this 350 but you easly speed that up to 650.
     // Serial.print("still detecting sensor value = "); // in the video it is 500
     // Serial.println(fireSensor);
      fireSensor = analogRead(fireSensorPin);
      if (fireSensor > 350) {
       // Serial.print("no fire   sensor value = ");
       // Serial.println(fireSensor);
        return false;
        break;
      }
      delay(1000);
      counter++;
    }
    if (counter >= 7) {
       DHT.read11(DHT11Pin);
       int tmp1 = DHT.humidity;  
       int tmp2 = DHT.temperature;  
       String humidity = String(tmp1);
       String temperature = String(tmp2);
       
      String printout = "FIRE!,";
      printout +=  fireSensor;
      printout +=  ","+humidity;
      printout +=  ","+temperature+",";
      Serial.print(printout);
      return true;
    }
  }

  delay(1000);
  counter = 0; // set counter back to 0 so if it has broken out the while loop it doesnt built up an currupt value
}
